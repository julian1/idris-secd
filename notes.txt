
OK - I think call data. should specify where to copy the values back?

opcodes...
  

calldataload - is an accessor function... to access arguments passed.

-------
SO THIS explains HOW ITS POSSIBLE TO DO A SINGLE RETURN TO DEPLOY THE CONTRACT WITH ALL METHODS.

----------
so I think that we need to try to use LOG to check if our code does anything when called...
or increment a value...
  hevm doesn't support calling again with the contract deployed


---------
-- solidity dispatches - or the evm dispatches - i think solidity builds the table.. 
-- so that explains how it works.

method_id = first 4 bytes of msg.data
if method_id == 0x25d8dcf2 jump to 0x11
if method_id == 0xaabbccdd jump to 0x22
if method_id == 0xffaaccee jump to 0x33
other code <- Solidity fallback function code could be here
0x11:
code for function with method id 0x25d8dcf2
0x22:
code for another function
0x33:
code for another function


https://ethereum.stackexchange.com/questions/7602/how-does-the-evm-find-the-entry-of-a-called-function








---------------------

  -- Add : Expr x -> Expr y -> Expr ( sub1 ( plus  x y))      -- adding should pop2 and add 1 - should be -1 - need to subtrac
  -- Add : Expr x -> Expr y -> Expr ( ( plus1  x y))      -- adding should pop2 and add 1 - should be -1 - need to subtrac
                                                  -- this should be a substraction... 

-- so we can know the amount of gas at compile time - and then limit what it does... 
-- we should also be able to evaluate it... 
-- we probably don't even need to embed the gas cost directly in the types...
-- we can embed it, in a evm compilation strategy... instead. which
-- eg. so that we can record stack use information 

-- we need a kecakk thing - so we can place code...

{-
expr' : Expr 1
expr' = 102
-}
 

-- add : (x : Nat) -> (y : Nat) -> {auto smaller' : LT x y} -> Nat
-- this is correct cost is 3 gas
-- how do we express that we don't care about the value

-- n is being treated as a Nat rather than an integer
-- expr : { auto blah : n  } -> Expr n
-- auto prf : d > 0 = True} 
-- expr : { auto prf : n > 0 = True } -> Expr n

-- expr : { auto blah : n > 0 = True } -> Expr n
-- 
-- expr : Expr 5
-- {a:Type}
-- index : {a:Type} -> {n:Nat} -> Fin n -> Vect n a -> a
-- expr : {n:Nat} -> Expr n

-- I think we're making the mistake... here - of having something percolate up....
-- WHERE AS IF WE HAD A CLEAR EXPRESSION - then we could instead construct
-- a proof of the value of some gas expression

-- this isn't correct - we could specify the proof on the evaluation function of expr ...

-- expr : { auto blah : n > 0 = True } -> Expr n


--  Add : {a : Elem  x }  -> Elem y -> Elem ( x + y + 1 )
--   There : {x,y:a} -> {xs:Vect n a} -> IsElem x xs -> IsElem x (y :: xs)
  -- can we put a deriving...



elem1 : Elem 1 
elem1 = Literal 456

